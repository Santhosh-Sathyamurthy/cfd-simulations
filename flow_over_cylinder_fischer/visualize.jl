# Description:
# This script is for post-processing and visualization of the CFD simulation results.
# It uses Makie.jl for high-quality, GPU-accelerated plotting to avoid the
# "graininess" issue and produce high-resolution images with legends.
#
# This script reads the.vtu files generated by `v2_parallelization_final.jl`.

# --- HOW TO RUN ---
# 1. Make sure the simulation has been run and the output files exist.
# 2. Run this script from your terminal (without mpiexecjl):
#
#    julia visualize.jl

# --- Package Management ---
# --- Package Management ---
using Pkg

# Add necessary packages if not already installed
vis_dependencies = [
    "CairoMakie",
    "VTKDataIO",
    "NaturalSort",
    "Printf",
    "LinearAlgebra"
]

for pkg in vis_dependencies
    if !haskey(Pkg.installed(), pkg)
        Pkg.add(pkg)
    end
end

# --- Load Packages ---
using CairoMakie
using VTKDataIO
using NaturalSort
using Printf
using LinearAlgebra

# --- Visualization Parameters ---
const BASE_OUTPUT_DIR = "optimized_cylinder_flow"
const RE_TO_VISUALIZE = 100.0
const FRAME_TO_PLOT = 500
const CREATE_ANIMATION = true
const ANIMATION_FRAMERATE = 20
const RESOLUTION = (1200, 600)

# --- Load VTU Data ---
function load_vtk_data(filepath)
    if !isfile(filepath)
        @warn "VTK file not found: $filepath"
        return nothing
    end

    vtk = read_vtk(filepath)
    points = get_points(vtk)
    cells = get_cells(vtk)

    uh_data = get_point_data(vtk)["uh"]
    ph_data = get_point_data(vtk)["ph"]

    coords_x = [p[1] for p in points]
    coords_y = [p[2] for p in points]

    tris = [c.connectivity for c in cells]

    vel_mag = [norm(u) for u in uh_data]

    return (x=coords_x, y=coords_y, tris=tris, vel=vel_mag, pres=ph_data)
end

# --- Plot Creator ---
function create_plot(data, title_str)
    fig = Figure(resolution = RESOLUTION, fontsize = 20)

    ax1 = Axis(fig[1, 1], title = "Velocity Magnitude", aspect = DataAspect())
    ax2 = Axis(fig[1, 2], title = "Pressure", aspect = DataAspect())

    vel_plot = mesh!(ax1, data.x, data.y, hcat(data.tris...)', color = data.vel, colormap = :viridis)
    Colorbar(fig[2, 1], vel_plot, label = "Velocity", vertical = false)

    pres_plot = mesh!(ax2, data.x, data.y, hcat(data.tris...)', color = data.pres, colormap = :plasma)
    Colorbar(fig[2, 2], pres_plot, label = "Pressure", vertical = false)

    Label(fig[0, 1:2], title_str, fontsize = 24, font = :bold, tellwidth = false)

    return fig
end

# --- Main Logic ---
function main()
    println("Starting visualization process...")

    re_dir = joinpath(BASE_OUTPUT_DIR, "Re_$(RE_TO_VISUALIZE)")
    if !isdir(re_dir)
        error("Output directory for Re=$(RE_TO_VISUALIZE) not found at $(re_dir)")
    end

    # --- Static Frame ---
    println("Generating static plot for frame $(FRAME_TO_PLOT)...")
    static_file = joinpath(re_dir, "results_$(FRAME_TO_PLOT).vtu")
    data = load_vtk_data(static_file)

    if data !== nothing
        title_str = "Flow at Re=$(RE_TO_VISUALIZE), Time Step=$(FRAME_TO_PLOT)"
        fig = create_plot(data, title_str)
        outfile = joinpath(re_dir, "snapshot_Re_$(RE_TO_VISUALIZE)_step_$(FRAME_TO_PLOT).png")
        save(outfile, fig, px_per_unit = 2)
        println("  -> Saved snapshot to $outfile")
    end

    # --- Animation ---
    if CREATE_ANIMATION
        println("\nGenerating animation for Re=$(RE_TO_VISUALIZE)...")

        files = filter(f -> endswith(f, ".vtu"), readdir(re_dir, join = true))
        sort!(files, lt = natural)

        if isempty(files)
            @warn "No .vtu files found to create animation."
            return
        end

        animation_path = joinpath(re_dir, "animation_Re_$(RE_TO_VISUALIZE).mp4")

        record(animation_path, 1:length(files), framerate = ANIMATION_FRAMERATE) do i
            filepath = files[i]
            step_match = match(r"results_(\d+)\.vtu", basename(filepath))
            step_num = step_match === nothing ? i : parse(Int, step_match[1])

            println("  -> Processing frame $(i)/$(length(files)) (Step $(step_num))")

            data = load_vtk_data(filepath)
            if data !== nothing
                title_str = "Flow at Re=$(RE_TO_VISUALIZE), Time Step=$(step_num)"
                return create_plot(data, title_str)
            else
                return Figure(resolution = RESOLUTION) # Empty placeholder frame
            end
        end

        println("  -> Animation saved to $(animation_path)")
    end

    println("\nVisualization complete.")
end

main()
